{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "HTTP Connector Configuration",
  "oneOf": [
    {
      "title": "HTTP Connector",
      "type": "object",
      "required": ["connector", "url", "method", "schedule", "jq"],
      "properties": {
        "connector": {
          "const": "http",
          "description": "Must be 'http'"
        },
        "url": {
          "type": "string",
          "format": "uri",
          "pattern": "^https?://.+",
          "description": "Must be a valid HTTP or HTTPS URL"
        },
        "method": {
          "type": "string",
          "enum": ["GET", "POST", "PUT", "DELETE", "PATCH"],
          "description": "Standard HTTP methods"
        },
        "schedule": {
          "type": "string",
          "pattern": "^((\\*|[0-9]+|[0-9]+-[0-9]+|\\*/[0-9]+)(,)?\\s*){5}$",
          "description": "Cron expression like */5 * * * *"
        },
        "jq": {
          "type": "string",
          "description": "Must be a valid jq expression"
        },
        "pagination.type": {
          "type": "string",
          "enum": ["page-based", "cursor-based", "header-based", "body_link-based"],
          "description": "Pagination strategy type."
        },
        "pagination.page_param": {
          "type": "string",
          "description": "Query parameter for page index or offset (e.g. 'page', 'start')."
        },
        "pagination.cursor_param": {
          "type": "string",
          "description": "Query parameter for cursor-based pagination (e.g. 'cursor', 'fromId', 'after')."
        },
        "pagination.cursor_id": {
          "type": "string",
          "description": "JSON key used to extract cursor from last record (e.g. 'id', 'a')."
        },
        "pagination.next_header": {
          "type": "string",
          "description": "Header name containing next cursor (for header pagination)."
        },
        "pagination.body_link_path": {
          "type": "string",
          "description": "JSON path or jq selector to extract 'next' URL (for body_link pagination)."
        },
        "patternProperties": {
          "^headers\\..+$": {
            "type": "string",
            "description": "Additional header configuration"
          },
          "^json\\..+$": {
            "type": "string",
            "description": "Additional JSON configuration"
          },
          "*": {
            "type": "string",
            "pattern": "^SECRET\\s+[a-zA-Z0-9_]+$",
            "description": "Accept SECRET values"
          },
          "^params\\..+$": {
            "type": "string",
            "description": "Additional parameter configuration"
          }
        }
      },
      "additionalProperties": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "pattern": "^SECRET\\s+[a-zA-Z0-9_]+$",
            "description": "Secret reference"
          }
        ]
      }
    },
    {
      "title": "Lookup HTTP Connector",
      "type": "object",
      "required": ["connector", "url", "method", "jq"],
      "properties": {
        "connector": {
          "const": "lookup-http",
          "description": "Must be 'lookup-http'"
        },
        "url": {
          "type": "string",
          "pattern": "^https?://.+|^\\$.*",
          "description": "Must be a valid URL or an expression starting with $"
        },
        "method": {
          "type": "string",
          "enum": ["GET", "POST", "PUT", "DELETE", "PATCH"],
          "description": "Standard HTTP methods"
        },
        "jq": {
          "type": "string",
          "description": "Must be a valid jq expression"
        },
        "pagination.type": {
          "type": "string",
          "enum": ["page-based", "cursor-based", "header-based", "body_link-based"],
          "description": "Pagination strategy type."
        },
        "pagination.page_param": {
          "type": "string",
          "description": "Query parameter for page index or offset (e.g. 'page', 'start')."
        },
        "pagination.cursor_param": {
          "type": "string",
          "description": "Query parameter for cursor-based pagination (e.g. 'cursor', 'fromId', 'after')."
        },
        "pagination.cursor_id": {
          "type": "string",
          "description": "JSON key used to extract cursor from last record (e.g. 'id', 'a')."
        },
        "pagination.next_header": {
          "type": "string",
          "description": "Header name containing next cursor (for header pagination)."
        },
        "pagination.body_link_path": {
          "type": "string",
          "description": "JSON path or jq selector to extract 'next' URL (for body_link pagination)."
        }
      },
      "patternProperties": {
        "^headers\\..+$": {
          "type": "string",
          "description": "Additional header configuration"
        },
        "^json\\..+$": {
          "type": "string",
          "description": "Additional JSON configuration"
        },
        "^params\\..+$": {
          "type": "string",
          "description": "Additional parameter configuration"
        }
      },
      "additionalProperties": true
    },
    {
      "title": "Websocket Connector",
      "type": "object",
      "required": ["connector", "url", "jq"],
      "properties": {
        "connector": {
          "const": "ws",
          "description": "Must be 'ws'"
        },
        "url": {
          "type": "string",
          "pattern": "^wss?://.+|^\\$.*",
          "description": "Must be a valid URL or an expression starting with $"
        },
        "jq": {
          "type": "string",
          "description": "Must be a valid jq expression"
        },
        "on_start_query": {
          "type": "string",
          "pattern": "^SELECT.*",
          "description": "Must be valid SELECT statement"
        }
      },
      "additionalProperties": true
    },
    {
      "title": "Kafka Sink Connector",
      "type": "object",
      "required": [
        "connector",
        "topic",
        "server"
      ],
      "properties": {
        "connector": {
          "const": "kafka",
          "description": "Must be 'kafka'"
        },
        "topic": {
          "type": "string",
          "description": "The Kafka topic to write to"
        },
        "server": {
          "type": "string",
          "description": "The Kafka bootstrap server address"
        },
        "format": {
          "type": "string",
          "description": "The data format",
          "default": "json"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Secret properties",
      "type": "object",
      "description": "Default backend for Secret properties",
      "required": ["backend"],
      "properties": {
        "backend": {
          "const": "meta",
          "description": "Must be 'meta'"
        }
      }
    }
  ]
}
